{"version":3,"sources":["utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["web3","Web3","window","ethereum","contractABI","require","contractAddress","contractAddresses","connectWallet","a","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mintNFT","url","name","description","trim","success","metadata","Object","image","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","mint","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","useEffect","addWalletListener","on","accounts","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f57f8124.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport contractAddresses from \"../contract/address/NFT.json\";\r\nconst web3 = new Web3(window.ethereum);\r\n\r\nconst contractABI = require(\"../contract/ABI/NFT.json\");\r\nconst contractAddress = contractAddresses[0]['ropsten'];\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\nexport const mintNFT = async(url, name, description) => {\r\n\r\n    //error handling\r\n    if (name.trim() == \"\" || description.trim() == \"\") {\r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    //make metadata\r\n    const metadata = new Object();\r\n    metadata.name = name;\r\n    metadata.image = url;\r\n    metadata.description = description;\r\n\r\n    //pinata pin request\r\n    // const pinataResponse = await pinJSONToIPFS(metadata);\r\n    // if (!pinataResponse.success) {\r\n    //     return {\r\n    //         success: false,\r\n    //         status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n    //     }\r\n    // }\r\n    // const tokenURI = pinataResponse.pinataUrl;\r\n\r\n    //load smart contract\r\n    // console.table(contractABI);\r\n    // console.table(contractAddresses[0]['ropsten']);\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        // 'data': window.contract.methods.mint(window.ethereum.selectedAddress, 'tokenURI').encodeABI() //make call to NFT smart contract\r\n        'data': window.contract.methods.mint().encodeABI() //make call to NFT smart contract\r\n    };\r\n\r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: <><p>✅ Check out your transaction on <a href={'https://ropsten.etherscan.io/tx/'+txHash}>Etherscan</a></p></>\r\n\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [url, setURL] = useState('');\r\n\r\n  useEffect(async () => { //TODO: implement\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  const addWalletListener = async () => {\r\n    if (window.ethereum) {\r\n        window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n          if (accounts.length > 0) {\r\n            setWallet(accounts[0]);\r\n            setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n          } else {\r\n            setWallet('');\r\n            setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n          }\r\n        });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => { //TODO: implement\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => { //TODO: implement\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\r\n      <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}